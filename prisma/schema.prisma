// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Music {
  id            String @id
  title         String
  artistId      String
  artistName    String
  audioUrl      String
  imageUrl      String
  imageLargeUrl String @default("")
  videoUrl      String @default("")
  duration      Float
  tags          String @default("")
  lyrics        String @default("")

  isPublish Boolean

  playCount   Int @default(0)
  upvoteCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id                 String   @id @default(uuid())
  productId          Int
  productName        String
  variantId          Int      @unique
  name               String
  description        String
  price              String
  isUsageBased       Boolean  @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  subscriptions LemonSqueezySubscription[]
}

model LemonSqueezyWebhookEvent {
  id              String   @id @default(uuid())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  createdAt       DateTime @default(now())
  processingError String?
}

model LemonSqueezySubscription {
  id             String    @id @default(uuid())
  lemonSqueezyId String    @unique
  orderId        Int
  name           String
  email          String
  status         String
  renewsAt       DateTime?
  endsAt         DateTime?
  trialEndsAt    DateTime?
  price          String
  isUsageBased   Boolean   @default(false)
  isPaused       Boolean   @default(false)

  userId String
  planId String
  Plan   Plan   @relation(fields: [planId], references: [id])
}
